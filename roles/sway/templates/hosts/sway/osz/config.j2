#INCLUDE####################################################
# output configuration
set $laptop "{{ (displays | selectattr('name', 'eq', 'laptop')).0.id }}"
set $screen1 "{{ (displays | selectattr('name', 'eq', 'screen1')).0.id }}"
set $screen2 "{{ (displays | selectattr('name', 'eq', 'screen2')).0.id }}"

# toggle proj
bindsym --no-repeat $mod+p output $screen2 toggle
bindsym --no-repeat $mod+Shift+p output $screen1 toggle; output $laptop toggle

# start kanshi
exec_always "pkill kanshi; kanshi"

# dpms
output * dpms on

# turn of screen when laptop closed
bindswitch --reload lid:on output $laptop disable
bindswitch --reload lid:off output $laptop enable

# assign workspace to screens
workspace $tag1 output $screen1
workspace $tag2 output $screen1
workspace $tag3 output $screen1
workspace $tag4 output $laptop
workspace $tag5 output $screen1
workspace $tag6 output $laptop
workspace $tag7 output $laptop
workspace $tag8 output $laptop
workspace $tag9 output $laptop
workspace $tag10 output $laptop

# laptop bindsyms
bindsym XF86AudioRaiseVolume exec pamixer -ui 5 && \
  pamixer --get-volume > $SWAYSOCK.wob
bindsym XF86AudioLowerVolume exec pamixer -ud 5 && \
  pamixer --get-volume > $SWAYSOCK.wob
bindsym XF86AudioMute exec pamixer --toggle-mute && \
  ( pamixer --get-mute && echo 0 > $SWAYSOCK.wob ) || \
  pamixer --get-volume > $SWAYSOCK.wob
bindsym XF86AudioMicMute exec amixer set Capture toggle
bindsym XF86MonBrightnessUp exec brightnessctl set +10% && \
  brightnessctl -m | cut -d',' -f4 | tr -d '%' > $SWAYSOCK.wob
bindsym XF86MonBrightnessDown exec brightnessctl set 10%- && \
  brightnessctl -m | cut -d',' -f4 | tr -d '%' > $SWAYSOCK.wob

# autostart per host
# syncthing
exec_always bash -c "pgrep -x syncthing || syncthing"
# pipewire
exec_always bash -c "pgrep -x pipewire || pipewire"
#INCLUDE####################################################
